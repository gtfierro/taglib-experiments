import json
from collections import defaultdict
import sys
from rdflib import Namespace, Literal, URIRef
import brickschema
from brickschema.namespaces import BRICK, RDF, TAG


BLDG = Namespace("urn:bldg#")

b = brickschema.GraphCollection()
b.load_graph("simple_map.ttl", graph_name=URIRef("urn:tagmap#"))
b.load_graph("Brick.ttl")
b.load_graph(sys.argv[1], graph_name=BLDG)
b.expand("shacl")

ph = []
tags = set()

def build_haystack_entity(ent):
    defn = defaultdict(dict)
    defn['id'] = {
        '_kind': 'ref',
        'val': ent,
        'dis': ent,
    }
    for tag in b.objects(ent, BRICK.hasTag):
        if tag.startswith(TAG):
            continue
        defn[tag] = {
            '_kind': 'marker',
        }
        tags.add(tag)
    for o in b.objects(ent, BRICK.isPointOf):
        defn['equipRef'] = {
            '_kind': 'ref',
            'val': o,
            'dis': o,
        }
    for s in b.subjects(object=ent, predicate=BRICK.hasPoint):
        defn['equipRef'] = {
            '_kind': 'ref',
            'val': s,
            'dis': s,
        }
    ph.append(defn)


res = b.query("SELECT DISTINCT ?ent WHERE { ?ent rdf:type/rdfs:subClassOf* brick:Entity . FILTER NOT EXISTS { ?ent rdf:type/rdfs:subClassOf* brick:Measurable } }")
for row in res:
    build_haystack_entity(row['ent'])

haystack_export = {
    "_kind": "grid",
    "meta": {
        "ver": "3.0",
        "doc": "autogenerated haystack export",
    },
    "cols": [{"name": tag} for tag in tags],
    "rows": ph,
}

with open(f"{sys.argv[1]}.json", 'w') as f:
    json.dump(haystack_export, f, indent=2)
